# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:43:13+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class AcceleratorType(Enum):
    ACCELERATOR_TYPE_UNSPECIFIED = 'ACCELERATOR_TYPE_UNSPECIFIED'
    CDC = 'CDC'
    HEALTHCARE = 'HEALTHCARE'
    CCAI_INSIGHTS = 'CCAI_INSIGHTS'
    CLOUDSEARCH = 'CLOUDSEARCH'


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'
    UNKNOWN = 'UNKNOWN'


class Accelerator(BaseModel):
    acceleratorType: Optional[AcceleratorType] = Field(
        None, description='The type of an accelator for a CDF instance.'
    )
    state: Optional[State] = Field(None, description='The state of the accelerator.')


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class CancelOperationRequest(BaseModel):
    pass


class CryptoKeyConfig(BaseModel):
    keyReference: Optional[str] = Field(
        None,
        description='The name of the key which is used to encrypt/decrypt customer data. For key in Cloud KMS, the key should be in the format of `projects/*/locations/*/keyRings/*/cryptoKeys/*`.',
    )


class DnsPeering(BaseModel):
    description: Optional[str] = Field(
        None, description='Optional. Optional description of the dns zone.'
    )
    domain: Optional[str] = Field(
        None, description='Required. The dns name suffix of the zone.'
    )
    name: Optional[str] = Field(
        None,
        description='Required. The resource name of the dns peering zone. Format: projects/{project}/locations/{location}/instances/{instance}/dnsPeerings/{dns_peering}',
    )
    targetNetwork: Optional[str] = Field(
        None,
        description='Optional. Optional target network to which dns peering should happen.',
    )
    targetProject: Optional[str] = Field(
        None,
        description='Optional. Optional target project to which dns peering should happen.',
    )


class Empty(BaseModel):
    pass


class EventPublishConfig(BaseModel):
    enabled: Optional[bool] = Field(
        None, description='Required. Option to enable Event Publishing.'
    )
    topic: Optional[str] = Field(
        None,
        description='Required. The resource name of the Pub/Sub topic. Format: projects/{project_id}/topics/{topic_id}',
    )


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class DisabledReasonEnum(Enum):
    DISABLED_REASON_UNSPECIFIED = 'DISABLED_REASON_UNSPECIFIED'
    KMS_KEY_ISSUE = 'KMS_KEY_ISSUE'


class State1(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    RUNNING = 'RUNNING'
    FAILED = 'FAILED'
    DELETING = 'DELETING'
    UPGRADING = 'UPGRADING'
    RESTARTING = 'RESTARTING'
    UPDATING = 'UPDATING'
    AUTO_UPDATING = 'AUTO_UPDATING'
    AUTO_UPGRADING = 'AUTO_UPGRADING'
    DISABLED = 'DISABLED'


class Type(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    BASIC = 'BASIC'
    ENTERPRISE = 'ENTERPRISE'
    DEVELOPER = 'DEVELOPER'


class ListDnsPeeringsResponse(BaseModel):
    dnsPeerings: Optional[List[DnsPeering]] = Field(
        None, description='List of dns peering.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )


class Location(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class NetworkConfig(BaseModel):
    ipAllocation: Optional[str] = Field(
        None,
        description='The IP range in CIDR notation to use for the managed Data Fusion instance nodes. This range must not overlap with any other ranges used in the Data Fusion instance network.',
    )
    network: Optional[str] = Field(
        None,
        description='Name of the network in the customer project with which the Tenant Project will be peered for executing pipelines. In case of shared VPC where the network resides in another host project the network should specified in the form of projects/{host-project-id}/global/networks/{network}',
    )


class OperationMetadata(BaseModel):
    additionalStatus: Optional[Dict[str, str]] = Field(
        None,
        description='Map to hold any additional status info for the operation If there is an accelerator being enabled/disabled/deleted, this will be populated with accelerator name as key and status as ENABLING, DISABLING or DELETING',
    )
    apiVersion: Optional[str] = Field(
        None, description='API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusDetail: Optional[str] = Field(
        None, description='Human-readable status of the operation if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Name of the verb executed by the operation.'
    )


class RemoveIamPolicyRequest(BaseModel):
    pass


class RemoveIamPolicyResponse(BaseModel):
    pass


class RestartInstanceRequest(BaseModel):
    pass


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class UpgradeInstanceRequest(BaseModel):
    pass


class Type1(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    TYPE_PREVIEW = 'TYPE_PREVIEW'
    TYPE_GENERAL_AVAILABILITY = 'TYPE_GENERAL_AVAILABILITY'


class Version(BaseModel):
    availableFeatures: Optional[List[str]] = Field(
        None,
        description='Represents a list of available feature names for a given version.',
    )
    defaultVersion: Optional[bool] = Field(
        None,
        description='Whether this is currently the default version for Cloud Data Fusion',
    )
    type: Optional[Type1] = Field(
        None, description='Type represents the release availability of the version'
    )
    versionNumber: Optional[str] = Field(
        None,
        description="The version number of the Data Fusion instance, such as '6.0.1.0'.",
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class View(Enum):
    NAMESPACE_VIEW_UNSPECIFIED = 'NAMESPACE_VIEW_UNSPECIFIED'
    NAMESPACE_VIEW_BASIC = 'NAMESPACE_VIEW_BASIC'
    NAMESPACE_VIEW_FULL = 'NAMESPACE_VIEW_FULL'


class AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class Instance(BaseModel):
    accelerators: Optional[List[Accelerator]] = Field(
        None,
        description='Output only. List of accelerators enabled for this CDF instance.',
    )
    apiEndpoint: Optional[str] = Field(
        None, description='Output only. Endpoint on which the REST APIs is accessible.'
    )
    availableVersion: Optional[List[Version]] = Field(
        None,
        description='Output only. Available versions that the instance can be upgraded to using UpdateInstanceRequest.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the instance was created.'
    )
    cryptoKeyConfig: Optional[CryptoKeyConfig] = Field(
        None,
        description='The crypto key configuration. This field is used by the Customer-Managed Encryption Keys (CMEK) feature.',
    )
    dataprocServiceAccount: Optional[str] = Field(
        None,
        description="User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines. This allows users to have fine-grained access control on Dataproc's accesses to cloud resources.",
    )
    description: Optional[str] = Field(
        None, description='A description of this instance.'
    )
    disabledReason: Optional[List[DisabledReasonEnum]] = Field(
        None,
        description='Output only. If the instance state is DISABLED, the reason for disabling the instance.',
    )
    displayName: Optional[str] = Field(
        None, description='Display name for an instance.'
    )
    enableRbac: Optional[bool] = Field(
        None, description='Option to enable granular role-based access control.'
    )
    enableStackdriverLogging: Optional[bool] = Field(
        None, description='Option to enable Stackdriver Logging.'
    )
    enableStackdriverMonitoring: Optional[bool] = Field(
        None, description='Option to enable Stackdriver Monitoring.'
    )
    enableZoneSeparation: Optional[bool] = Field(
        None, description='Option to enable zone separation.'
    )
    eventPublishConfig: Optional[EventPublishConfig] = Field(
        None, description='Option to enable and pass metadata for event publishing.'
    )
    gcsBucket: Optional[str] = Field(
        None,
        description='Output only. Cloud Storage bucket generated by Data Fusion in the customer project.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description="The resource labels for instance to use to annotate any related underlying resources such as Compute Engine VMs. The character '=' is not allowed to be used within the labels.",
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The name of this instance is in the form of projects/{project}/locations/{location}/instances/{instance}.',
    )
    networkConfig: Optional[NetworkConfig] = Field(
        None,
        description='Network configuration options. These are required when a private Data Fusion instance is to be created.',
    )
    options: Optional[Dict[str, str]] = Field(
        None,
        description='Map of additional options used to configure the behavior of Data Fusion instance.',
    )
    p4ServiceAccount: Optional[str] = Field(
        None, description='Output only. P4 service account for the customer project.'
    )
    privateInstance: Optional[bool] = Field(
        None,
        description='Specifies whether the Data Fusion instance should be private. If set to true, all Data Fusion nodes will have private IP addresses and will not be able to access the public internet.',
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='Output only. Deprecated. Use tenant_project_id instead to extract the tenant project ID.',
    )
    serviceEndpoint: Optional[str] = Field(
        None,
        description='Output only. Endpoint on which the Data Fusion UI is accessible.',
    )
    state: Optional[State1] = Field(
        None, description='Output only. The current state of this Data Fusion instance.'
    )
    stateMessage: Optional[str] = Field(
        None,
        description='Output only. Additional information about the current state of this Data Fusion instance if available.',
    )
    tenantProjectId: Optional[str] = Field(
        None, description='Output only. The name of the tenant project.'
    )
    type: Optional[Type] = Field(None, description='Required. Instance type.')
    updateTime: Optional[str] = Field(
        None, description='Output only. The time the instance was last updated.'
    )
    version: Optional[str] = Field(None, description='Current version of Data Fusion.')
    zone: Optional[str] = Field(
        None,
        description='Name of the zone in which the Data Fusion instance will be created. Only DEVELOPER instances use this field.',
    )


class ListAvailableVersionsResponse(BaseModel):
    availableVersions: Optional[List[Version]] = Field(
        None, description='Represents a list of versions that are supported.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results or empty if there are no more results in the list.',
    )


class ListInstancesResponse(BaseModel):
    instances: Optional[List[Instance]] = Field(
        None, description='Represents a list of Data Fusion instances.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results or empty if there are no more results in the list.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class ListLocationsResponse(BaseModel):
    locations: Optional[List[Location]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class Policy(BaseModel):
    auditConfigs: Optional[List[AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class SetIamPolicyRequest(BaseModel):
    policy: Optional[Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )


class IAMPolicy(BaseModel):
    policy: Optional[Policy] = Field(
        None,
        description='Policy definition if IAM policy fetching is successful, otherwise empty.',
    )
    status: Optional[Status] = Field(None, description='Status of iam policy fetching.')


class ListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[Operation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class Namespace(BaseModel):
    iamPolicy: Optional[IAMPolicy] = Field(
        None, description='IAM policy associated with this namespace.'
    )
    name: Optional[str] = Field(None, description='Name of the given namespace.')


class ListNamespacesResponse(BaseModel):
    namespaces: Optional[List[Namespace]] = Field(
        None, description='List of namespaces'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results or empty if there are no more results in the list.',
    )
